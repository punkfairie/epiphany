"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;
exports.ruleName = exports.messages = void 0;
var _stylelint = require("stylelint");
var _isStandardSyntaxRule = _interopRequireDefault(require("stylelint/lib/utils/isStandardSyntaxRule"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var ruleName = 'a11y/font-size-is-readable';
exports.ruleName = ruleName;
var messages = _stylelint.utils.ruleMessages(ruleName, {
  expected: function expected(selector) {
    return "Expected a larger font-size in ".concat(selector);
  }
});
exports.messages = messages;
var THRESHOLD_IN_PX = 15;
var pxToPt = function pxToPt(v) {
  return 0.75 * v;
};
var checkInPx = function checkInPx(value) {
  return value.toLowerCase().endsWith('px') && parseFloat(value) < THRESHOLD_IN_PX;
};
var checkInPt = function checkInPt(value) {
  return value.toLowerCase().endsWith('pt') && parseFloat(value) < pxToPt(THRESHOLD_IN_PX);
};
function _default(actual) {
  return function (root, result) {
    var validOptions = _stylelint.utils.validateOptions(result, ruleName, {
      actual: actual
    });
    if (!validOptions || !actual) {
      return;
    }
    root.walkRules(function (rule) {
      var selector = null;
      if (!(0, _isStandardSyntaxRule["default"])(rule)) {
        return;
      }
      selector = rule.selector;
      if (!selector) {
        return;
      }
      var isRejected = rule.nodes.some(function (o) {
        return o.type === 'decl' && o.prop.toLowerCase() === 'font-size' && (checkInPx(o.value) || checkInPt(o.value));
      });
      if (isRejected) {
        _stylelint.utils.report({
          index: rule.lastEach,
          message: messages.expected(selector),
          node: rule,
          ruleName: ruleName,
          result: result
        });
      }
    });
  };
}